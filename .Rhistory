select(-Notes, -Births, -Delivery.Method, -Delivery.Method.Code)
# join the counts/rates for first births v. all births
natality<- left_join(natality_counties, natality_counties_all)
# county and FIPS codes from https://www.census.gov/geo/reference/codes/cou.html
counties<- read.delim("national_county.txt", header = FALSE, sep = ",",
colClasses = "character")
counties_2<- counties %>%
rename_("state_code" = "V1",
"fips_state" = "V2",
"fips_county" = "V3",
"county_name" = "V4",
"fips_class" = "V5") %>%
mutate(fips = paste0(fips_state, fips_county))
# population totals for counties
# https://www.census.gov/data/datasets/2016/demo/popest/counties-total.html#ds
setwd("C:/Users/smits/Documents/GitHub/delivery_method/")
county.pop <- read.csv("co-est2016-alldata.csv", colClasses = "character") %>%
mutate(fips = paste0(STATE, COUNTY)) %>%
select(fips, POPESTIMATE2012)
#join in unidentified counties
unidentified<- filter(natality, str_detect(County, "Unidentified")) %>%
mutate(state_code = substr(County.Code, 1,2))
counties_3<- left_join(counties_2, county.pop) %>%
left_join(natality, by=c("fips" = "County.Code")) %>%
left_join(unidentified, by = c("fips_state" = "state_code")) %>%
mutate(County_all_pop = ifelse(is.na(County.x), County.y, County.x),
cesarean_rate_all_pop = ifelse(is.na(cesarean_rate_all.x), cesarean_rate_all.y, cesarean_rate_all.x),
births_all_pop = ifelse(is.na(births_all.x), births_all.y, births_all.x),
population = as.numeric(POPESTIMATE2012)) %>%
group_by(County_all_pop) %>%
mutate(population_all_pop = sum(population))
# if you join in and expand the unidentified counties:
##take either county.x or county.y
##cesarean_rate.x or cesarean_rate.y
##births.x or births.y
## depending on whether x is populated.
# check that we have cesarean rates for all counties with >100,000 2013 pop
#unidentified_check<- filter(counties_3, population<100000)
# following stack overflow example
setwd("C:/Users/smits/Documents/GitHub/delivery_method/counties_shapes/gz_2010_us_050_00_5m")
US.counties <- readOGR(dsn=".",layer="gz_2010_us_050_00_5m")
#leave out AK, HI, and PR (state FIPS: 02, 15, and 72)
US.counties <- US.counties[!(US.counties$STATE %in% c("02","15","72")),]
county.data <- US.counties@data
county.data <- cbind(id=rownames(county.data),county.data)
county.data <- data.table(county.data)
county.data[,FIPS:=paste0(STATE,COUNTY)] # this is the state + county FIPS code
setkey(county.data,FIPS)
natality.data <- data.table(counties_3)
setkey(natality.data,fips)
head(US.counties)
head(map.county)
head(county.pop)
county.pop <- read.csv("co-est2016-alldata.csv", colClasses = "character") %>%
mutate(fips = paste0(STATE, COUNTY))
# population totals for counties
# https://www.census.gov/data/datasets/2016/demo/popest/counties-total.html#ds
setwd("C:/Users/smits/Documents/GitHub/delivery_method/")
county.pop <- read.csv("co-est2016-alldata.csv", colClasses = "character") %>%
mutate(fips = paste0(STATE, COUNTY))
head(county.pop)
county.pop <- read.csv("co-est2016-alldata.csv", colClasses = "character") %>%
mutate(fips = paste0(STATE, COUNTY),
state = to_lower(STNAME),
county = to_lower(gsub(" .*$", "", CTYNAME)))%>%
select(fips, POPESTIMATE2012)
county.pop <- read.csv("co-est2016-alldata.csv", colClasses = "character") %>%
mutate(fips = paste0(STATE, COUNTY),
state = tolower(STNAME),
county = tolower(gsub(" .*$", "", CTYNAME)))%>%
select(fips, POPESTIMATE2012)
county.pop <- read.csv("co-est2016-alldata.csv", colClasses = "character") %>%
mutate(fips = paste0(STATE, COUNTY),
state = tolower(STNAME),
county = tolower(gsub(" .*$", "", CTYNAME)))%>%
select(fips, POPESTIMATE2012, state, county)
head(county.pop)
#join in unidentified counties
unidentified<- filter(natality, str_detect(County, "Unidentified")) %>%
mutate(state_code = substr(County.Code, 1,2))
counties_3<- left_join(counties_2, county.pop) %>%
left_join(natality, by=c("fips" = "County.Code")) %>%
left_join(unidentified, by = c("fips_state" = "state_code")) %>%
mutate(County_all_pop = ifelse(is.na(County.x), County.y, County.x),
cesarean_rate_all_pop = ifelse(is.na(cesarean_rate_all.x), cesarean_rate_all.y, cesarean_rate_all.x),
births_all_pop = ifelse(is.na(births_all.x), births_all.y, births_all.x),
population = as.numeric(POPESTIMATE2012)) %>%
group_by(County_all_pop) %>%
mutate(population_all_pop = sum(population))
head(counties_3)
# following stack overflow example
setwd("C:/Users/smits/Documents/GitHub/delivery_method/counties_shapes/gz_2010_us_050_00_5m")
US.counties <- readOGR(dsn=".",layer="gz_2010_us_050_00_5m")
#leave out AK, HI, and PR (state FIPS: 02, 15, and 72)
US.counties <- US.counties[!(US.counties$STATE %in% c("02","15","72")),]
county.data <- US.counties@data
county.data <- cbind(id=rownames(county.data),county.data)
county.data <- data.table(county.data)
county.data[,FIPS:=paste0(STATE,COUNTY)] # this is the state + county FIPS code
setkey(county.data,FIPS)
natality.data <- data.table(counties_3)
setkey(natality.data,fips)
map.df <- data.table(fortify(US.counties))
setkey(map.df,id)
county.data2 <- county.data %>%
left_join(counties_3, by=c("FIPS"="fips")) %>%
data.table()
setkey(county.data2,id)
head(map.df)
head(natality)
names(county.pop)
#join natality with county.pop
birth_map<- left_join(natality, county.pop, by=c("County.Code" = "fips"))
map.county <- data.table(map_data('county'))
setkey(map.county,region,subregion)
birth_map <- data.table(birth_map)
birth_map$state_names<- gsub(".*,", "", birth_map$County) ##need to to_lower, and full word!
birth_map$county_names<- gsub(",.*", "", birth_map$County) #to lower, and remove 'county'
head(birth_map)
setkey(birth_map,state,county)
map.df      <- map.county[birth_map]
p<- ggplot(map.df, aes(x=long, y=lat)) +
geom_polygon() +
coord_map()
p
p<- ggplot(map.df, aes(x=long, y=lat, fill = cesarean_rate_all)) +
geom_polygon() +
coord_map()
p
p<- ggplot(map.df, aes(x=long, y=lat, group = group, fill = cesarean_rate_all)) +
geom_polygon() +
coord_map()
p
p<- ggplot(map.df, aes(x=long, y=lat, group = group, fill = cesarean_rate_all)) +
geom_polygon() +
coord_map() +
geom_path(data = state_map, colou="black")
state_map <- map_data("state")
p<- ggplot(map.df, aes(x=long, y=lat, group = group, fill = cesarean_rate_all)) +
geom_polygon() +
coord_map() +
geom_path(data = state_map, colou="black")
p
p<- ggplot(map.df, aes(x=long, y=lat, group = group, fill = cesarean_rate_all)) +
geom_polygon() +
coord_map() +
geom_path(data = state_map, colour="black")
p
names(map.df)
p<- ggplot(map.df, aes(x=long, y=lat, group = group, fill = "cesarean_rate_all")) +
geom_polygon() +
coord_map() +
geom_path(data = state_map, colour="black")
p
p<- ggplot(map.df, aes(x=long, y=lat, group = group, fill =cesarean_rate_all)) +
geom_polygon() +
coord_map() +
geom_path(data = state_map, colour="black")
p
p<- ggplot(map.df, aes(x=long, y=lat, group = group)) +
geom_polygon( colour = "grey" , aes( fill = cesarean_rate_all )) +
coord_map() +
geom_path(data = state_map, colour="black")+
theme_clean()
p
p<- ggplot(map.df, aes(x=long, y=lat, group = group)) +
geom_polygon( colour = "grey" , aes( fill = cesarean_rate_all )) +
coord_map() +
geom_path(data = state_map, colour="black")+
theme_clean( )
??theme_clean
geom_path(data = state_map, colour="black"
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Cesarean section rate"),
checkboxInput(inputId="unidentified_counties",
label = "Show counties with population <100,000",
value = FALSE),
plotlyOutput("county_map")
)
p<- ggplot(map.df, aes(x=long, y=lat, group = group)) +
geom_polygon( colour = "grey" , aes( fill = cesarean_rate_all )) +
coord_map() +
geom_path(data = state_map, colour="black")
p
ggplotly(p)
p
p<- ggplot(map.df, aes(x=long, y=lat, group = group)) +
geom_polygon( colour = "grey" , aes( fill = cesarean_rate_all )) +
coord_map("polyconic" ) +
geom_path(data = state_map, colour="black")
p
# initialize libraries
library(shiny)
library(plyr)
library(dplyr)
library(ggplot2)
library(rgdal)    # for readOGR(...)
library(maptools)
library(data.table)
library(mapproj)
library(RColorBrewer) # for brewer.pal(...)
library(plotly)
library(stringr)  # for str_detect(...)
setwd("C:/Users/smits/Documents/GitHub/delivery_method")
#import some data
# Note, you have to delete the comments at the end of the text files.
# due to supression, the totals likely won't be able to be calculated when
# you include segments.
# age and race - use this for the pop-up next to the map.
natality<- read.delim("wonder_data_extracts/Natality_12_15_race_age_v2.txt",
header = TRUE, colClasses = "character")
#total county rates - first born children
natality_counties<- read.delim("wonder_data_extracts/Natality_12_15_county_totals_v2.txt",
header = TRUE, colClasses = "character") %>%
filter(Births != "Suppressed") %>%
mutate(Births = as.numeric(Births)) %>%
group_by(County.Code, County) %>%
mutate(cesarean_rate_first = round(Births/sum(Births),4)*100,
births_first = sum(Births)) %>%
filter(Delivery.Method == "Cesarean") %>%
select(-Notes, -Births, -Delivery.Method, -Delivery.Method.Code)
# county totals, all births
natality_counties_all<- read.delim("wonder_data_extracts/Natality_12_15_county_totals_all_births_v2.txt",
header = TRUE, colClasses = "character") %>%
filter(Births != "Suppressed") %>%
mutate(Births = as.numeric(Births)) %>%
group_by(County.Code, County) %>%
mutate(cesarean_rate_all = round(Births/sum(Births),4)*100,
births_all = sum(Births)) %>%
filter(Delivery.Method == "Cesarean") %>%
select(-Notes, -Births, -Delivery.Method, -Delivery.Method.Code)
# join the counts/rates for first births v. all births
natality<- left_join(natality_counties, natality_counties_all)
head(natality)
setwd("C:/Users/smits/Documents/GitHub/delivery_method/")
county.pop <- read.csv("co-est2016-alldata.csv", colClasses = "character") %>%
mutate(fips = paste0(STATE, COUNTY),
state = tolower(STNAME),
county = tolower(gsub(" .*$", "", CTYNAME)))%>%
select(fips, POPESTIMATE2012, state, county)
## playing around with map speed
map.county <- map_data('county')
counties   <- unique(map.county[,5:6])
state_map <- map_data("state")
#join natality with county.pop
birth_map<- left_join(natality_counties_all, county.pop, by=c("County.Code" = "fips"))
map.county <- data.table(map_data('county'))
setkey(map.county,region,subregion)
birth_map <- data.table(birth_map)
setkey(birth_map,state,county)
map.df      <- map.county[birth_map]
p<- ggplot(map.df, aes(x=long, y=lat, group = group)) +
geom_polygon( colour = "grey" , aes( fill = cesarean_rate_all )) +
coord_map("polyconic" ) +
geom_path(data = state_map, colour="black")
p
head(map.df)
unidentified<- filter(natality, str_detect(County, "Unidentified")) %>%
mutate(state_code = substr(County.Code, 1,2))
counties_3<- left_join(counties_2, county.pop) %>%
left_join(natality, by=c("fips" = "County.Code")) %>%
left_join(unidentified, by = c("fips_state" = "state_code")) %>%
mutate(County_all_pop = ifelse(is.na(County.x), County.y, County.x),
cesarean_rate_all_pop = ifelse(is.na(cesarean_rate_all.x), cesarean_rate_all.y, cesarean_rate_all.x),
births_all_pop = ifelse(is.na(births_all.x), births_all.y, births_all.x),
population = as.numeric(POPESTIMATE2012)) %>%
group_by(County_all_pop) %>%
mutate(population_all_pop = sum(population))
#join in unidentified counties
unidentified<- filter(natality, str_detect(County, "Unidentified")) %>%
mutate(state_code = substr(County.Code, 1,2))
counties_3<- county.pop %>%
left_join(natality, by=c("fips" = "County.Code")) %>%
left_join(unidentified, by = c("fips_state" = "state_code")) %>%
mutate(County_all_pop = ifelse(is.na(County.x), County.y, County.x),
cesarean_rate_all_pop = ifelse(is.na(cesarean_rate_all.x), cesarean_rate_all.y, cesarean_rate_all.x),
births_all_pop = ifelse(is.na(births_all.x), births_all.y, births_all.x),
population = as.numeric(POPESTIMATE2012)) %>%
group_by(County_all_pop) %>%
mutate(population_all_pop = sum(population))
counties_3<- county.pop %>%
left_join(natality, by=c("fips" = "County.Code"))
names(counties_3)
names(unidentified)
head(counties_3)
counties_3<- county.pop %>%
left_join(natality, by=c("fips" = "County.Code")) %>%
mutate(fips_stat = substr(fips,1,2)) %>%
left_join(unidentified, by = c("fips_state" = "state_code"))
head(unidentified)
View(unidentified)
counties_3<- county.pop %>%
left_join(natality, by=c("fips" = "County.Code")) %>%
mutate(fips_state = substr(fips,1,2)) %>%
left_join(unidentified, by = c("fips_state" = "state_code"))
counties_3<- county.pop %>%
left_join(natality, by=c("fips" = "County.Code")) %>%
mutate(fips_state = substr(fips,1,2)) %>%
left_join(unidentified, by = c("fips_state" = "state_code")) %>%
mutate(County_all_pop = ifelse(is.na(County.x), County.y, County.x),
cesarean_rate_all_pop = ifelse(is.na(cesarean_rate_all.x), cesarean_rate_all.y, cesarean_rate_all.x),
births_all_pop = ifelse(is.na(births_all.x), births_all.y, births_all.x),
population = as.numeric(POPESTIMATE2012)) %>%
group_by(County_all_pop) %>%
mutate(population_all_pop = sum(population))
map.county <- map_data('county')
counties   <- unique(map.county[,5:6])
state_map <- map_data("state")
#join natality with county.pop
birth_map<- left_join(counties_3, county.pop, by=c("County.Code" = "fips"))
map.county <- data.table(map_data('county'))
setkey(map.county,region,subregion)
birth_map <- data.table(birth_map)
setkey(birth_map,state,county)
head(birth_map)
setkey(birth_map,state.x,county.x)
map.df      <- map.county[birth_map]
p<- ggplot(map.df, aes(x=long, y=lat, group = group)) +
geom_polygon( colour = "grey" , aes( fill = cesarean_rate_all )) +
coord_map("polyconic" ) +
geom_path(data = state_map, colour="black")
p
head(map.df)
# plot the birth rate minus unidentified counties.
p<- ggplot(map.df, aes(x=long, y=lat, group = group)) +
geom_polygon( colour = "grey" , aes( fill = cesarean_rate_all.x )) +
coord_map("polyconic" ) +
geom_path(data = state_map, colour="black")
p
# plot the birth rate minus unidentified counties.
p<- ggplot(map.df, aes(x=long, y=lat, group = group)) +
geom_polygon( colour = "grey" , aes( fill = cesarean_rate_all.x )) +
coord_map("polyconic" ) +
geom_path(data = state_map, colour="black")+
theme_blank()
# plot the birth rate minus unidentified counties.
p<- ggplot(map.df, aes(x=long, y=lat, group = group)) +
geom_polygon( colour = "grey" , aes( fill = cesarean_rate_all.x )) +
coord_map("polyconic" ) +
geom_path(data = state_map, colour="black")+
geom_blank()
p
# plot the birth rate minus unidentified counties.
p<- ggplot(map.df, aes(x=long, y=lat, group = group)) +
geom_polygon( colour = "grey" , aes( fill = cesarean_rate_all.x )) +
coord_map("polyconic" ) +
geom_path(data = state_map, colour="black")+
theme_void()
p
# plot the birth rate minus unidentified counties.
p<- ggplot(map.df, aes(x=long, y=lat, group = group)) +
geom_polygon( colour = "grey" , aes( fill = cesarean_rate_all.x )) +
scale_fill_gradientn("",colours=brewer.pal(9,"YlOrRd"))+
coord_map("polyconic" ) +
geom_path(data = state_map, colour="black")+
theme_void()
p
?colours
# plot the birth rate minus unidentified counties.
p<- ggplot(map.df, aes(x=long, y=lat, group = group)) +
geom_polygon( colour = "grey" , aes( fill = cesarean_rate_all.x )) +
scale_fill_gradientn("",colours=brewer.pal(9,"YlGnBu"))+
coord_map("polyconic" ) +
geom_path(data = state_map, colour="black")+
theme_void()
p
runApp('delivery_method_app')
runApp('delivery_method_app')
# age and race - use this for the pop-up next to the map.
natality_race_age<- read.delim("wonder_data_extracts/Natality_12_15_race_age_v2.txt",
header = TRUE, colClasses = "character")
# county totals, all births
natality<- read.delim("wonder_data_extracts/Natality_12_15_county_totals_all_births_v2.txt",
header = TRUE, colClasses = "character") %>%
filter(Births != "Suppressed") %>%
mutate(Births = as.numeric(Births)) %>%
group_by(County.Code, County) %>%
mutate(cesarean_rate_all = round(Births/sum(Births),4)*100,
births_all = sum(Births)) %>%
filter(Delivery.Method == "Cesarean") %>%
select(-Notes, -Births, -Delivery.Method, -Delivery.Method.Code)
# population totals for counties
# https://www.census.gov/data/datasets/2016/demo/popest/counties-total.html#ds
setwd("C:/Users/smits/Documents/GitHub/delivery_method/")
county.pop <- read.csv("co-est2016-alldata.csv", colClasses = "character") %>%
mutate(fips = paste0(STATE, COUNTY),
state = tolower(STNAME),
county = tolower(gsub(" .*$", "", CTYNAME)))%>%
select(fips, POPESTIMATE2012, state, county)
#join in unidentified counties
unidentified<- filter(natality, str_detect(County, "Unidentified")) %>%
mutate(state_code = substr(County.Code, 1,2))
counties_3<- county.pop %>%
left_join(natality, by=c("fips" = "County.Code")) %>%
mutate(fips_state = substr(fips,1,2)) %>%
left_join(unidentified, by = c("fips_state" = "state_code")) %>%
mutate(County_all_pop = ifelse(is.na(County.x), County.y, County.x),
cesarean_rate_all_pop = ifelse(is.na(cesarean_rate_all.x), cesarean_rate_all.y, cesarean_rate_all.x),
births_all_pop = ifelse(is.na(births_all.x), births_all.y, births_all.x),
population = as.numeric(POPESTIMATE2012)) %>%
group_by(County_all_pop) %>%
mutate(population_all_pop = sum(population))
## setup mapping data
map.county <- map_data('county')
counties   <- unique(map.county[,5:6])
state_map <- map_data("state")
#join natality with county.pop
birth_map<- left_join(counties_3, county.pop, by=c("County.Code" = "fips"))
map.county <- data.table(map_data('county'))
setkey(map.county,region,subregion)
birth_map <- data.table(birth_map)
setkey(birth_map,state.x,county.x)
map.df      <- map.county[birth_map]
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Cesarean section rate"),
plotOutput("county_map")
)
# plot the birth rate minus unidentified counties.
p<- ggplot(map.df, aes(x=long, y=lat, group = group)) +
geom_polygon( colour = "grey" , aes( fill = cesarean_rate_all.x )) +
scale_fill_gradientn("",colours=brewer.pal(9,"YlGnBu"))+
coord_map("polyconic" ) +
geom_path(data = state_map, colour="black")+
theme_void()
# unfilled is unavailable due to population changes.
# grey/NA is an 'unidentified' county
p
head(map.df)
head(birth_map)
names(map.df)
runApp('delivery_method_app')
source('~/GitHub/delivery_method/delivery_method_app/app.R')
source('~/GitHub/delivery_method/delivery_method_app/app.R')
head(map.df)
source('~/GitHub/delivery_method/delivery_method_app/app.R')
head(map.df)
source('~/GitHub/delivery_method/delivery_method_app/app.R')
source('~/GitHub/delivery_method/delivery_method_app/app.R')
source('~/GitHub/delivery_method/delivery_method_app/app.R')
source('~/GitHub/delivery_method/delivery_method_app/app.R')
source('~/GitHub/delivery_method/delivery_method_app/app.R')
source('~/GitHub/delivery_method/delivery_method_app/app.R')
counties<- data.table(counties)
map.county <- map_data('county')
counties   <- unique(map.county[,5:6])
counties<- data.table(counties)
head(counties)
##minimally reproducible example for gitlab question:
map.county <- map_data('county')
head(map.county)
counties<- data.table(map.county)
ggplot(counties, aes(x=long, y=lat, group = group)) +
geom_polygon( colour = "grey" , aes( fill = grey)) +
coord_map("polyconic" ) + #causes the tooltips to not work as well
geom_path(data = state_map, colour="black")
ggplot(counties, aes(x=long, y=lat, group = group)) +
geom_polygon( colour = "grey" , aes( fill = grey)) +
coord_map("polyconic" ) + #causes the tooltips to not work as well
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Cesarean section rate"),
div(
style = "position:relative",
plotOutput("county_map",
hover = hoverOpts("plot_hover", delay = 100, delayType = "debounce")),
uiOutput("hover_info")
)
)
ggplot(counties, aes(x=long, y=lat, group = group)) +
geom_polygon( colour = "grey" , aes( fill = grey)) +
coord_map("polyconic" )  #causes the tooltips to not work as well
counties<- data.table(map.county)
head(counties)
ggplot(counties, aes(x=long, y=lat, group = group)) +
geom_polygon(colour = "grey") +
coord_map("polyconic" )  #causes the tooltips to not work as well
library(ggplot2)
library(mapdata)
##minimally reproducible example for gitlab question:
map.county <- map_data('county')
counties<- data.table(map.county)
ggplot(counties, aes(x=long, y=lat, group = group)) +
geom_polygon(colour = "grey") +
coord_map("polyconic" )  #causes the tooltips to not work as well
head(counties)
runApp('nearpoint_example')
runApp('nearpoint_example')
# initialize libraries
library(shiny)
library(plyr)
library(dplyr)
library(ggplot2)
library(rgdal)    # for readOGR(...)
library(maptools)
library(data.table)
library(mapproj)
library(RColorBrewer) # for brewer.pal(...)
library(plotly)
library(stringr)  # for str_detect(...)
setwd("C:/Users/smits/Documents/GitHub/delivery_method")
#import some data
# Note, you have to delete the comments at the end of the text files.
# due to supression, the totals likely won't be able to be calculated when
# you include segments.
# age and race - use this for the pop-up next to the map.
natality_race_age<- read.delim("wonder_data_extracts/Natality_12_15_race_age_v2.txt",
header = TRUE, colClasses = "character")
