ggplot(race_age, aes(x=Age.of.Mother.9.Code, y=cesarean_rate, color = Race, group = Race)) +
stat_summary(fun.y = median, geom="line", size = 1)+
theme_few()+
theme(legend.position=c(.2, .82), legend.title = element_blank(),
axis.title = element_text(color = "black"),
text = element_text(color = "black"),
axis.text = element_text(color = "black")) +
ylab("")+
xlab("Age of Mother") +
scale_y_continuous(labels = scales::percent,
limits = c(0,1))
head(race_age)
View(race_age)
ggplot(race_age[race_age$Births>20,], aes(x=Age.of.Mother.9.Code, y=cesarean_rate, color = Race, group = Race)) +
stat_summary(fun.y = median, geom="line", size = 1)+
theme_few()+
theme(legend.position=c(.2, .82), legend.title = element_blank(),
axis.title = element_text(color = "black"),
text = element_text(color = "black"),
axis.text = element_text(color = "black")) +
ylab("")+
xlab("Age of Mother") +
scale_y_continuous(labels = scales::percent,
limits = c(0,1))
source('~/GitHub/delivery_method/delivery_method_app/app.R')
source('~/GitHub/delivery_method/delivery_method_app/app.R')
source('~/GitHub/delivery_method/delivery_method_app/app.R')
ggplot(race_age[race_age$Births>20,], aes(x=Age.of.Mother.9.Code, y=cesarean_rate, color = Race, group = Race)) +
stat_summary(fun.y = median, geom="line", size = 1)+
theme(legend.position=c(.2, .82), legend.title = element_blank(),
axis.title = element_text(color = "black"),
text = element_text(color = "black"),
axis.text = element_text(color = "black")) +
ylab("")+
xlab("Age of Mother") +
scale_y_continuous(labels = scales::percent,
limits = c(0,1))
ggplot(race_age[race_age$Births>20,], aes(x=Age.of.Mother.9.Code, y=cesarean_rate, color = Race, group = Race)) +
stat_summary(fun.y = median, geom="line", size = 1)+
theme_minimal()+
theme(legend.position=c(.2, .82), legend.title = element_blank(),
axis.title = element_text(color = "black"),
text = element_text(color = "black"),
axis.text = element_text(color = "black")) +
ylab("")+
xlab("Age of Mother") +
scale_y_continuous(labels = scales::percent,
limits = c(0,1))
ggplot(race_age[race_age$Births>20,], aes(x=Age.of.Mother.9.Code, y=cesarean_rate, color = Race, group = Race)) +
stat_summary(fun.y = median, geom="line", size = 1)+
theme_bw()+
theme(legend.position=c(.2, .82), legend.title = element_blank(),
axis.title = element_text(color = "black"),
text = element_text(color = "black"),
axis.text = element_text(color = "black")) +
ylab("")+
xlab("Age of Mother") +
scale_y_continuous(labels = scales::percent,
limits = c(0,1))
ggplot(race_age, aes(x=Age.of.Mother.9.Code, y=cesarean_rate, fill = Race)) +
geom_boxplot()+
theme_few()+
theme(legend.position="top", legend.title = element_blank(),
axis.title = element_text(color = "black"),
text = element_text(color = "black"),
axis.text = element_text(color = "black")) +
ylab("Percent of Births Delivered via Cesarean") +
xlab("Age of Mother") +
scale_y_continuous(labels = scales::percent)+
scale_fill_brewer()
ggplot(race_age[race_age$Births>20,], aes(x=Age.of.Mother.9.Code, y=cesarean_rate, fill = Race)) +
geom_boxplot()+
theme_few()+
theme(legend.position="top", legend.title = element_blank(),
axis.title = element_text(color = "black"),
text = element_text(color = "black"),
axis.text = element_text(color = "black")) +
ylab("Percent of Births Delivered via Cesarean") +
xlab("Age of Mother") +
scale_y_continuous(labels = scales::percent)+
scale_fill_brewer()
table(race_age$Race, race_age$Race.Code)
race_age<- natality_race_age %>%
mutate(Births = as.numeric(Births)) %>%
group_by(County.Code, Race.Code, Age.of.Mother.9.Code) %>%
mutate(cesarean_rate = Births/sum(Births),
mutate(Race = ordered(Race, levels=c("Black or African American",
"White",
"American Indian or Alaska Native",
"Asian or Pacific Islander")))) %>%
filter(Delivery.Method == "Cesarean")
race_age<- natality_race_age %>%
mutate(Births = as.numeric(Births)) %>%
group_by(County.Code, Race.Code, Age.of.Mother.9.Code) %>%
mutate(cesarean_rate = Births/sum(Births),
mutate(Race = as.ordered(Race, levels=c("Black or African American",
"White",
"American Indian or Alaska Native",
"Asian or Pacific Islander")))) %>%
filter(Delivery.Method == "Cesarean")
str(race_age)
race_age<- natality_race_age %>%
mutate(Births = as.numeric(Births)) %>%
group_by(County.Code, Race.Code, Age.of.Mother.9.Code) %>%
mutate(cesarean_rate = Births/sum(Births),
mutate(Race = factor(Race, levels=c("Black or African American",
"White",
"American Indian or Alaska Native",
"Asian or Pacific Islander"),
ordered = TRUE))) %>%
filter(Delivery.Method == "Cesarean")
race_age<- natality_race_age %>%
mutate(Births = as.numeric(Births)) %>%
group_by(County.Code, Race.Code, Age.of.Mother.9.Code) %>%
mutate(cesarean_rate = Births/sum(Births),
Race = factor(Race, levels=c("Black or African American",
"White",
"American Indian or Alaska Native",
"Asian or Pacific Islander"),
ordered = TRUE))) %>%
filter(Delivery.Method == "Cesarean")
race_age<- natality_race_age %>%
mutate(Births = as.numeric(Births)) %>%
group_by(County.Code, Race.Code, Age.of.Mother.9.Code) %>%
mutate(cesarean_rate = Births/sum(Births),
Race = factor(Race, levels=c("Black or African American",
"White",
"American Indian or Alaska Native",
"Asian or Pacific Islander"),
ordered = TRUE)) %>%
filter(Delivery.Method == "Cesarean")
table(race_age$Race)
# validate against aggregated age/race totals
# race_age_totals<- read.delim("wonder_data_extracts/Natality_12_2015_race_age_totals_v2.txt",
#                              header = TRUE, colClasses = "character") %>%
#   mutate(Births = as.numeric(Births)) %>%
#          # race_recode = case_when(.$Race.Code == '1002-5' ~ "Other",
#          #                         .$Race.Code == 'A-PI' ~ "Other",
#          #                         TRUE ~ .$Race))%>%
#   group_by(Race.Code, Age.of.Mother.9.Code) %>%
#   mutate(cesarean_rate = Births/sum(Births)) %>%
#   filter(Delivery.Method == "Cesarean",
#          Births >= 100)
#
# ggplot(race_age_totals,aes(x=Age.of.Mother.9.Code, y=cesarean_rate, color = Race, group = Race))+
#   geom_point() +
#   geom_path()
# county totals, all births
natality<- read.delim("wonder_data_extracts/Natality_12_15_county_totals_all_births_v2.txt",
header = TRUE, colClasses = "character") %>%
filter(Births != "Suppressed") %>%
mutate(Births = as.numeric(Births)) %>%
group_by(County.Code, County) %>%
mutate(cesarean_rate_all = round(Births/sum(Births),4)*100,
births_all = sum(Births)) %>%
filter(Delivery.Method == "Cesarean") %>%
select(-Notes, -Births, -Delivery.Method, -Delivery.Method.Code)
# population totals for counties
# https://www.census.gov/data/datasets/2016/demo/popest/counties-total.html#ds
setwd("C:/Users/smits/Documents/GitHub/delivery_method/")
county.pop <- read.csv("co-est2016-alldata.csv", colClasses = "character") %>%
mutate(fips = paste0(STATE, COUNTY),
state = tolower(STNAME),
county = tolower(gsub(" .*$", "", CTYNAME)))%>%
select(fips, POPESTIMATE2012, state, county)
#join in unidentified counties
unidentified<- filter(natality, str_detect(County, "Unidentified")) %>%
mutate(state_code = substr(County.Code, 1,2))
counties_3<- county.pop %>%
left_join(natality, by=c("fips" = "County.Code")) %>%
mutate(fips_state = substr(fips,1,2)) %>%
left_join(unidentified, by = c("fips_state" = "state_code")) %>%
mutate(County_all_pop = ifelse(is.na(County.x), County.y, County.x),
cesarean_rate_all_pop = ifelse(is.na(cesarean_rate_all.x), cesarean_rate_all.y, cesarean_rate_all.x),
births_all_pop = ifelse(is.na(births_all.x), births_all.y, births_all.x),
population = as.numeric(POPESTIMATE2012)) %>%
group_by(County_all_pop) %>%
mutate(population_all_pop = sum(population))
# if you join in and expand the unidentified counties:
##take either county.x or county.y
##cesarean_rate.x or cesarean_rate.y
##births.x or births.y
## depending on whether x is populated.
# check that we have cesarean rates for all counties with >100,000 2013 pop
#unidentified_check<- filter(counties_3, population<100000)
## setup mapping data
map.county <- map_data('county')
counties   <- unique(map.county[,5:6])
state_map <- map_data("state")
#join natality with county.pop
birth_map<- left_join(counties_3, county.pop, by=c("County.Code" = "fips"))
map.county <- data.table(map_data('county'))
setkey(map.county,region,subregion)
birth_map <- data.table(birth_map)
setkey(birth_map,state.x,county.x)
map.df      <- map.county[birth_map]
# create the ggplot object
p<- ggplot(map.df, aes(x=long, y=lat, group = group)) +
geom_polygon(colour = "grey" , aes(fill = cesarean_rate_all.x )) +
coord_map("polyconic",
xlim = c(-120, -70),ylim = c(24.9, 49.9))  +
geom_path(data = state_map, colour="black")+
theme_void() +
theme(legend.position = c(.9,.25)) +
geom_polygon_interactive(aes(tooltip = paste0(County_all_pop,
"<br>Population: ", format(population_all_pop,big.mark=","),
"<br>C-section Rate: ", cesarean_rate_all_pop, "%")
, fill = cesarean_rate_all.x))+
scale_fill_gradientn("",colours=brewer.pal(9,"YlGnBu"))
ggplot(race_age[race_age$Births>20,], aes(x=Age.of.Mother.9.Code, y=cesarean_rate, fill = Race)) +
geom_boxplot()+
theme_few()+
theme(legend.position="top", legend.title = element_blank(),
axis.title = element_text(color = "black"),
text = element_text(color = "black"),
axis.text = element_text(color = "black")) +
ylab("Percent of Births Delivered via Cesarean") +
xlab("Age of Mother") +
scale_y_continuous(labels = scales::percent)+
scale_fill_brewer()
race_age<- natality_race_age %>%
mutate(Births = as.numeric(Births)) %>%
group_by(County.Code, Race.Code, Age.of.Mother.9.Code) %>%
mutate(cesarean_rate = Births/sum(Births),
Race = factor(Race, levels=c("American Indian or Alaska Native",
"Asian or Pacific Islander",
"White",
"Black or African American"),
ordered = TRUE)) %>%
filter(Delivery.Method == "Cesarean")
ggplot(race_age[race_age$Births>20,], aes(x=Age.of.Mother.9.Code, y=cesarean_rate, fill = Race)) +
geom_boxplot()+
theme_few()+
theme(legend.position="top", legend.title = element_blank(),
axis.title = element_text(color = "black"),
text = element_text(color = "black"),
axis.text = element_text(color = "black")) +
ylab("Percent of Births Delivered via Cesarean") +
xlab("Age of Mother") +
scale_y_continuous(labels = scales::percent)+
scale_fill_brewer()
summary(map.df$lat)
summary(map.df$long)
# create the ggplot object
p<- ggplot(map.df, aes(x=long, y=lat, group = group)) +
geom_polygon(colour = "grey" , aes(fill = cesarean_rate_all.x )) +
coord_map("polyconic",
xlim = c(min(map.df$long), max(map.df$long)),ylim = c(min(map.df$lat)-.3, max(map.df$lat)+.4))  +
geom_path(data = state_map, colour="black")+
theme_void() +
theme(legend.position = c(.9,.25)) +
geom_polygon_interactive(aes(tooltip = paste0(County_all_pop,
"<br>Population: ", format(population_all_pop,big.mark=","),
"<br>C-section Rate: ", cesarean_rate_all_pop, "%")
, fill = cesarean_rate_all.x))+
scale_fill_gradientn("",colours=brewer.pal(9,"YlGnBu"))
# unfilled is unavailable due to population changes.
# grey/NA is an 'unidentified' county
ggiraph(code = print(p), selection_type = "multiple") #takes a super long time to render...
table(map.df$region)
# create the ggplot object
state_filter<- c("new york", "new jersey")
p<- ggplot(map.df[map.df$region %in% state_filter], aes(x=long, y=lat, group = group)) +
geom_polygon(colour = "grey" , aes(fill = cesarean_rate_all.x )) +
coord_map("polyconic")+
geom_path(data = state_map, colour="black")+
theme_void() +
theme(legend.position = c(.9,.25)) +
geom_polygon_interactive(aes(tooltip = paste0(County_all_pop,
"<br>Population: ", format(population_all_pop,big.mark=","),
"<br>C-section Rate: ", cesarean_rate_all_pop, "%")
, fill = cesarean_rate_all.x))+
scale_fill_gradientn("",colours=brewer.pal(9,"YlGnBu"))
#testing:
ggiraph(code = print(p), selection_type = "multiple")
head(state_map)
p<- ggplot(map.df[map.df$region %in% state_filter], aes(x=long, y=lat, group = group)) +
geom_polygon(colour = "grey" , aes(fill = cesarean_rate_all.x )) +
coord_map("polyconic")+
geom_path(data = state_map[state_map$region %in% state_filter], colour="black")+
theme_void() +
theme(legend.position = c(.9,.25)) +
geom_polygon_interactive(aes(tooltip = paste0(County_all_pop,
"<br>Population: ", format(population_all_pop,big.mark=","),
"<br>C-section Rate: ", cesarean_rate_all_pop, "%")
, fill = cesarean_rate_all.x))+
scale_fill_gradientn("",colours=brewer.pal(9,"YlGnBu"))
p<- ggplot(map.df[map.df$region %in% state_filter,], aes(x=long, y=lat, group = group)) +
geom_polygon(colour = "grey" , aes(fill = cesarean_rate_all.x )) +
coord_map("polyconic")+
geom_path(data = state_map[state_map$region %in% state_filter,], colour="black")+
theme_void() +
theme(legend.position = c(.9,.25)) +
geom_polygon_interactive(aes(tooltip = paste0(County_all_pop,
"<br>Population: ", format(population_all_pop,big.mark=","),
"<br>C-section Rate: ", cesarean_rate_all_pop, "%")
, fill = cesarean_rate_all.x))+
scale_fill_gradientn("",colours=brewer.pal(9,"YlGnBu"))
#testing:
ggiraph(code = print(p), selection_type = "multiple")
p<- ggplot(map.df[map.df$region %in% state_filter,], aes(x=long, y=lat, group = group)) +
geom_polygon(colour = "grey" , aes(fill = cesarean_rate_all.x )) +
coord_map("polyconic")+
geom_path(data = state_map[state_map$region %in% state_filter,], colour="black")+
theme_void() +
#theme(legend.position = c(.9,.25)) +
geom_polygon_interactive(aes(tooltip = paste0(County_all_pop,
"<br>Population: ", format(population_all_pop,big.mark=","),
"<br>C-section Rate: ", cesarean_rate_all_pop, "%")
, fill = cesarean_rate_all.x))+
scale_fill_gradientn("",colours=brewer.pal(9,"YlGnBu"))
#testing:
ggiraph(code = print(p), selection_type = "multiple")
state_map <- map_data("state") %>%
mutate(region = toTitleCase(region))
??totitlecase
library(tools)
state_map <- map_data("state") %>%
mutate(region = toTitleCase(region))
#join natality with county.pop
birth_map<- left_join(counties_3, county.pop, by=c("County.Code" = "fips")) %>%
mutate(region = toTitleCase(region))
head(birth_map)
map.county <- data.table(map_data('county'))  %>%
mutate(region = toTitleCase(region))
setkey(map.county,region,subregion)
## setup mapping data
map.county <- map_data('county') %>%
mutate(region = toTitleCase(region))
counties   <- unique(map.county[,5:6])
state_map <- map_data("state") %>%
mutate(region = toTitleCase(region))
#join natality with county.pop
birth_map<- left_join(counties_3, county.pop, by=c("County.Code" = "fips"))
map.county <- data.table(map.county)
setkey(map.county,region,subregion)
birth_map <- data.table(birth_map)
setkey(birth_map,state.x,county.x)
map.df      <- map.county[birth_map]
# create the ggplot object
state_filter<- c("new york", "new jersey")
p<- ggplot(map.df[map.df$region %in% state_filter,], aes(x=long, y=lat, group = group)) +
geom_polygon(colour = "grey" , aes(fill = cesarean_rate_all.x )) +
coord_map("polyconic")+
geom_path(data = state_map[state_map$region %in% state_filter,], colour="black")+
theme_void() +
#theme(legend.position = c(.9,.25)) +
geom_polygon_interactive(aes(tooltip = paste0(County_all_pop,
"<br>Population: ", format(population_all_pop,big.mark=","),
"<br>C-section Rate: ", cesarean_rate_all_pop, "%")
, fill = cesarean_rate_all.x))+
scale_fill_gradientn("",colours=brewer.pal(9,"YlGnBu"))
#testing:
ggiraph(code = print(p), selection_type = "multiple")
table(map.df$region)
head(counties_3)
View(map.df)
View(county.pop)
View(county.pop)
county.pop <- read.csv("co-est2016-alldata.csv", colClasses = "character") %>%
mutate(fips = paste0(STATE, COUNTY),
state = toTitleCase(STNAME),
county = tolower(gsub(" .*$", "", CTYNAME)))%>%
select(fips, POPESTIMATE2012, state, county)
#join in unidentified counties
unidentified<- filter(natality, str_detect(County, "Unidentified")) %>%
mutate(state_code = substr(County.Code, 1,2))
counties_3<- county.pop %>%
left_join(natality, by=c("fips" = "County.Code")) %>%
mutate(fips_state = substr(fips,1,2)) %>%
left_join(unidentified, by = c("fips_state" = "state_code")) %>%
mutate(County_all_pop = ifelse(is.na(County.x), County.y, County.x),
cesarean_rate_all_pop = ifelse(is.na(cesarean_rate_all.x), cesarean_rate_all.y, cesarean_rate_all.x),
births_all_pop = ifelse(is.na(births_all.x), births_all.y, births_all.x),
population = as.numeric(POPESTIMATE2012)) %>%
group_by(County_all_pop) %>%
mutate(population_all_pop = sum(population))
## setup mapping data
map.county <- map_data('county') %>%
mutate(region = toTitleCase(region))
counties   <- unique(map.county[,5:6])
state_map <- map_data("state") %>%
mutate(region = toTitleCase(region))
#join natality with county.pop
birth_map<- left_join(counties_3, county.pop, by=c("County.Code" = "fips"))
map.county <- data.table(map.county)
setkey(map.county,region,subregion)
birth_map <- data.table(birth_map)
setkey(birth_map,state.x,county.x)
map.df      <- map.county[birth_map]
# create the ggplot object
state_filter<- c("new york", "new jersey")
p<- ggplot(map.df[map.df$region %in% state_filter,], aes(x=long, y=lat, group = group)) +
geom_polygon(colour = "grey" , aes(fill = cesarean_rate_all.x )) +
coord_map("polyconic")+
geom_path(data = state_map[state_map$region %in% state_filter,], colour="black")+
theme_void() +
#theme(legend.position = c(.9,.25)) +
geom_polygon_interactive(aes(tooltip = paste0(County_all_pop,
"<br>Population: ", format(population_all_pop,big.mark=","),
"<br>C-section Rate: ", cesarean_rate_all_pop, "%")
, fill = cesarean_rate_all.x))+
scale_fill_gradientn("",colours=brewer.pal(9,"YlGnBu"))
#testing:
ggiraph(code = print(p), selection_type = "multiple")
table(map.df$region)
# create the ggplot object
state_filter<- c("New York", "New Jersey")
p<- ggplot(map.df[map.df$region %in% state_filter,], aes(x=long, y=lat, group = group)) +
geom_polygon(colour = "grey" , aes(fill = cesarean_rate_all.x )) +
coord_map("polyconic")+
geom_path(data = state_map[state_map$region %in% state_filter,], colour="black")+
theme_void() +
#theme(legend.position = c(.9,.25)) +
geom_polygon_interactive(aes(tooltip = paste0(County_all_pop,
"<br>Population: ", format(population_all_pop,big.mark=","),
"<br>C-section Rate: ", cesarean_rate_all_pop, "%")
, fill = cesarean_rate_all.x))+
scale_fill_gradientn("",colours=brewer.pal(9,"YlGnBu"))
#testing:
ggiraph(code = print(p), selection_type = "multiple")
source('~/GitHub/delivery_method/delivery_method_app/app.R')
source('~/GitHub/delivery_method/delivery_method_app/app.R')
source('~/GitHub/delivery_method/delivery_method_app/app.R')
source('~/GitHub/delivery_method/delivery_method_app/app.R')
View(unidentified)
View(counties_3)
View(counties_3)
# check population sums
unidentified_check<- filter(counties_3, state = 'alabama')
# check population sums
unidentified_check<- filter(counties_3, state == 'alabama')
# check population sums
unidentified_check<- filter(counties_3, state == 'Alabama')
View(unidentified_check)
counties_3<- county.pop %>%
left_join(natality, by=c("fips" = "County.Code")) %>%
mutate(fips_state = substr(fips,1,2)) %>%
left_join(unidentified, by = c("fips_state" = "state_code")) %>%
mutate(County_all_pop = ifelse(is.na(County.x), County.y, County.x),
cesarean_rate_all_pop = ifelse(is.na(cesarean_rate_all.x), cesarean_rate_all.y, cesarean_rate_all.x),
births_all_pop = ifelse(is.na(births_all.x), births_all.y, births_all.x),
population = as.numeric(POPESTIMATE2012)) %>%
group_by(County_all_pop) %>%
mutate(population_all_pop = sum(population)) %>%
filter(toLower(state) != county)  #this was super exagerating the population!
counties_3<- county.pop %>%
left_join(natality, by=c("fips" = "County.Code")) %>%
mutate(fips_state = substr(fips,1,2)) %>%
left_join(unidentified, by = c("fips_state" = "state_code")) %>%
mutate(County_all_pop = ifelse(is.na(County.x), County.y, County.x),
cesarean_rate_all_pop = ifelse(is.na(cesarean_rate_all.x), cesarean_rate_all.y, cesarean_rate_all.x),
births_all_pop = ifelse(is.na(births_all.x), births_all.y, births_all.x),
population = as.numeric(POPESTIMATE2012)) %>%
group_by(County_all_pop) %>%
mutate(population_all_pop = sum(population)) %>%
filter(tolower(state) != county)  #this was super exagerating the population!
# check population sums
unidentified_check<- filter(counties_3, state == 'Alabama')
View(unidentified_check)
counties_3<- county.pop %>%
left_join(natality, by=c("fips" = "County.Code")) %>%
mutate(fips_state = substr(fips,1,2)) %>%
left_join(unidentified, by = c("fips_state" = "state_code")) %>%
mutate(County_all_pop = ifelse(is.na(County.x), County.y, County.x),
cesarean_rate_all_pop = ifelse(is.na(cesarean_rate_all.x), cesarean_rate_all.y, cesarean_rate_all.x),
births_all_pop = ifelse(is.na(births_all.x), births_all.y, births_all.x),
population = as.numeric(POPESTIMATE2012)) %>%
filter(tolower(state) != county)  #this was super exagerating the population!
group_by(County_all_pop) %>%
mutate(population_all_pop = sum(population)) %>%
# if you join in and expand the unidentified counties:
##take either county.x or county.y
##cesarean_rate.x or cesarean_rate.y
##births.x or births.y
## depending on whether x is populated.
# check that we have cesarean rates for all counties with >100,000 2013 pop
#unidentified_check<- filter(counties_3, population<100000)
# check population sums
unidentified_check<- filter(counties_3, state == 'Alabama')
group_by(County_all_pop) %>%
mutate(population_all_pop = sum(population))
group_by(County_all_pop) %>%
mutate(population_all_pop = sum(population))
counties_3<- county.pop %>%
left_join(natality, by=c("fips" = "County.Code")) %>%
mutate(fips_state = substr(fips,1,2)) %>%
left_join(unidentified, by = c("fips_state" = "state_code")) %>%
mutate(County_all_pop = ifelse(is.na(County.x), County.y, County.x),
cesarean_rate_all_pop = ifelse(is.na(cesarean_rate_all.x), cesarean_rate_all.y, cesarean_rate_all.x),
births_all_pop = ifelse(is.na(births_all.x), births_all.y, births_all.x),
population = as.numeric(POPESTIMATE2012)) %>%
filter(tolower(state) != county) %>% #this was super exagerating the population!
group_by(County_all_pop) %>%
mutate(population_all_pop = sum(population))
# check population sums
unidentified_check<- filter(counties_3, state == 'Alabama')
View(unidentified_check)
## setup mapping data
map.county <- map_data('county') %>%
mutate(region = toTitleCase(region))
counties   <- unique(map.county[,5:6])
state_map <- map_data("state") %>%
mutate(region = toTitleCase(region))
#join natality with county.pop
birth_map<- left_join(counties_3, county.pop, by=c("County.Code" = "fips"))
map.county <- data.table(map.county)
setkey(map.county,region,subregion)
birth_map <- data.table(birth_map)
setkey(birth_map,state.x,county.x)
map.df      <- map.county[birth_map]
source('~/GitHub/delivery_method/delivery_method_app/app.R')
